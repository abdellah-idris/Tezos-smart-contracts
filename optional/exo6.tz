parameter (or (int %add) (int %sub));
storage   (pair (option %lastUser address) (int %total));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        # == add ==
        # if self.data.lastUser.is_some(): # @parameter%add : @storage
        DUP 2;      # @storage : @parameter%add : @storage
        CAR;        # option address : @parameter%add : @storage
        IF_NONE
          {
            SWAP;       # @storage : @parameter%add
            # self.data.lastUser = sp.Some(sp.sender) # @storage : @parameter%add
            SENDER;     # @sender : @storage : @parameter%add
            SOME;       # option address : @storage : @parameter%add
            UPDATE 1;   # @storage : @parameter%add
            # self.data.total += value # @storage : @parameter%add
            DUP;        # @storage : @storage : @parameter%add
            CDR;        # int : @storage : @parameter%add
            DIG 2;      # @parameter%add : int : @storage
            ADD;        # int : @storage
            UPDATE 2;   # @storage
          }
          {
            DROP;       # @parameter%add : @storage
            # if sp.sender == self.data.lastUser.unwrap_some(error="Not an adress!"): # @parameter%add : @storage
            DUP 2;      # @storage : @parameter%add : @storage
            CAR;        # option address : @parameter%add : @storage
            IF_NONE
              {
                PUSH string "Not an adress!"; # string : @parameter%add : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%add : @storage
            SENDER;     # @sender : @some : @parameter%add : @storage
            COMPARE;    # int : @parameter%add : @storage
            EQ;         # bool : @parameter%add : @storage
            IF
              {
                PUSH string "Not Allowed"; # string : @parameter%add : @storage
                FAILWITH;   # FAILED
              }
              {
                SWAP;       # @storage : @parameter%add
                # self.data.lastUser = sp.Some(sp.sender) # @storage : @parameter%add
                SENDER;     # @sender : @storage : @parameter%add
                SOME;       # option address : @storage : @parameter%add
                UPDATE 1;   # @storage : @parameter%add
                # self.data.total += value # @storage : @parameter%add
                DUP;        # @storage : @storage : @parameter%add
                CDR;        # int : @storage : @parameter%add
                DIG 2;      # @parameter%add : int : @storage
                ADD;        # int : @storage
                UPDATE 2;   # @storage
              }; # @storage
          }; # @storage
      }
      {
        # == sub ==
        # if self.data.lastUser.is_some(): # @parameter%sub : @storage
        DUP 2;      # @storage : @parameter%sub : @storage
        CAR;        # option address : @parameter%sub : @storage
        IF_NONE
          {
            SWAP;       # @storage : @parameter%sub
            # self.data.lastUser = sp.Some(sp.sender) # @storage : @parameter%sub
            SENDER;     # @sender : @storage : @parameter%sub
            SOME;       # option address : @storage : @parameter%sub
            UPDATE 1;   # @storage : @parameter%sub
            # self.data.total -= value # @storage : @parameter%sub
            DUP;        # @storage : @storage : @parameter%sub
            CDR;        # int : @storage : @parameter%sub
            DIG 2;      # @parameter%sub : int : @storage
            SWAP;       # int : @parameter%sub : @storage
            SUB;        # int : @storage
            UPDATE 2;   # @storage
          }
          {
            DROP;       # @parameter%sub : @storage
            # if sp.sender == self.data.lastUser.unwrap_some(error="Not a some!"): # @parameter%sub : @storage
            DUP 2;      # @storage : @parameter%sub : @storage
            CAR;        # option address : @parameter%sub : @storage
            IF_NONE
              {
                PUSH string "Not a some!"; # string : @parameter%sub : @storage
                FAILWITH;   # FAILED
              }
              {}; # @some : @parameter%sub : @storage
            SENDER;     # @sender : @some : @parameter%sub : @storage
            COMPARE;    # int : @parameter%sub : @storage
            EQ;         # bool : @parameter%sub : @storage
            IF
              {
                PUSH string "Not Allowed"; # string : @parameter%sub : @storage
                FAILWITH;   # FAILED
              }
              {
                SWAP;       # @storage : @parameter%sub
                # self.data.lastUser = sp.Some(sp.sender) # @storage : @parameter%sub
                SENDER;     # @sender : @storage : @parameter%sub
                SOME;       # option address : @storage : @parameter%sub
                UPDATE 1;   # @storage : @parameter%sub
                # self.data.total -= value # @storage : @parameter%sub
                DUP;        # @storage : @storage : @parameter%sub
                CDR;        # int : @storage : @parameter%sub
                DIG 2;      # @parameter%sub : int : @storage
                SWAP;       # int : @parameter%sub : @storage
                SUB;        # int : @storage
                UPDATE 2;   # @storage
              }; # @storage
          }; # @storage
      }; # @storage
    NIL operation; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };

